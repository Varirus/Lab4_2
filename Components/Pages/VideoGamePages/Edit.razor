@page "/videogames/edit"
@using Microsoft.EntityFrameworkCore
@using Lab4_2.Data
@inject IDbContextFactory<Lab4_2.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>VideoGame</h2>
<hr />
@if (VideoGame is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="VideoGame" OnValidSubmit="UpdateVideoGame" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="VideoGame.Id" value="@VideoGame.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="VideoGame.Title" class="form-control" />
                    <ValidationMessage For="() => VideoGame.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="VideoGame.Description" class="form-control" />
                    <ValidationMessage For="() => VideoGame.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="rating" class="form-label">Rating:</label>
                    <InputNumber id="rating" @bind-Value="VideoGame.Rating" class="form-control" />
                    <ValidationMessage For="() => VideoGame.Rating" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="ratingsamount" class="form-label">RatingsAmount:</label>
                    <InputNumber id="ratingsamount" @bind-Value="VideoGame.RatingsAmount" class="form-control" />
                    <ValidationMessage For="() => VideoGame.RatingsAmount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="genre" class="form-label">Genre:</label>
                    <InputText id="genre" @bind-Value="VideoGame.Genre" class="form-control" />
                    <ValidationMessage For="() => VideoGame.Genre" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="relasedate" class="form-label">RelaseDate:</label>
                    <InputDate id="relasedate" @bind-Value="VideoGame.RelaseDate" class="form-control" />
                    <ValidationMessage For="() => VideoGame.RelaseDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="imageurl" class="form-label">ImageUrl:</label>
                    <InputText id="imageurl" @bind-Value="VideoGame.ImageUrl" class="form-control" />
                    <ValidationMessage For="() => VideoGame.ImageUrl" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/videogames">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private VideoGame? VideoGame { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        VideoGame ??= await context.VideoGame.FirstOrDefaultAsync(m => m.Id == Id);

        if (VideoGame is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateVideoGame()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(VideoGame!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!VideoGameExists(VideoGame!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/videogames");
    }

    private bool VideoGameExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.VideoGame.Any(e => e.Id == id);
    }
}
