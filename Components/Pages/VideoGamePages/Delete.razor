@page "/videogames/delete"
@using Microsoft.EntityFrameworkCore
@using Lab4_2.Data
@inject IDbContextFactory<Lab4_2.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>VideoGame</h2>
    <hr />
    @if (videogame is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@videogame.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@videogame.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Rating</dt>
            <dd class="col-sm-10">@videogame.Rating</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">RatingsAmount</dt>
            <dd class="col-sm-10">@videogame.RatingsAmount</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Genre</dt>
            <dd class="col-sm-10">@videogame.Genre</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">RelaseDate</dt>
            <dd class="col-sm-10">@videogame.RelaseDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ImageUrl</dt>
            <dd class="col-sm-10">@videogame.ImageUrl</dd>
        </dl>
        <EditForm method="post" Model="videogame" OnValidSubmit="DeleteVideoGame" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(videogame is null)">Delete</button> |
            <a href="/videogames">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private VideoGame? videogame;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        videogame = await context.VideoGame.FirstOrDefaultAsync(m => m.Id == Id);

        if (videogame is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteVideoGame()
    {
        using var context = DbFactory.CreateDbContext();
        context.VideoGame.Remove(videogame!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/videogames");
    }
}
